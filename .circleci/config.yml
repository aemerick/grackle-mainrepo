version: 2.1

commands:
  set-env:
    description: "Set environment variables."
    steps:
      - run: |
          echo "backend : Agg" > $HOME/matplotlibrc
          echo 'export LD_LIBRARY_PATH=$HOME/local/lib:$LD_LIBRARY_PATH' >> $BASH_ENV
          echo 'export YT_DATA_DIR=$HOME/yt_test' >> $BASH_ENV
          echo 'export MATPLOTLIBRC=$HOME' >> $BASH_ENV

  install-dependencies:
    description: "Install dependencies."
    steps:
      - run: |
          source $BASH_ENV
          sudo apt-get update
          sudo apt-get install -y libhdf5-serial-dev gfortran libtool-bin
          python3 -m venv $HOME/venv
          source $HOME/venv/bin/activate
          pip install --upgrade pip
          pip install --upgrade wheel
          pip install --upgrade setuptools
          pip install Cython numpy h5py matplotlib fastcache flake8 pytest yt

  install-grackle:
    description: "Install grackle."
    parameters:
      omp:
        type: string
        default: 'false'
    steps:
      - run: |
          source $HOME/venv/bin/activate
          mkdir -p $HOME/local
          ./configure
          cd src/clib
          make clean
          make machine-linux-gnu
          if [ << parameters.omp >> == 'true' ]; then
            make omp-on
          fi
          make
          make install
          cd ../python
          python setup.py develop

  install-docs-dependencies:
    description: "Install dependencies for docs build."
    steps:
      - run: |
          python3 -m venv $HOME/venv
          source $HOME/venv/bin/activate
          pip install --upgrade pip
          pip install --upgrade wheel
          pip install --upgrade setuptools
          pip install sphinx

  download-test-data:
    description: "Download test data."
    steps:
      - run: |
          source $BASH_ENV
          source $HOME/venv/bin/activate
          mkdir -p $YT_DATA_DIR
          cd $YT_DATA_DIR
          wget --quiet http://yt-project.org/data/IsolatedGalaxy.tar.gz
          tar xzf IsolatedGalaxy.tar.gz
          rm IsolatedGalaxy.tar.gz

  run-tests:
    description: "Compile enzo and run tests."
    parameters:
      omp:
        type: string
        default: 'false'
    steps:
      - run: |
          source $BASH_ENV
          source $HOME/venv/bin/activate
          cd src
          if [ << parameters.omp >> == 'true' ]; then
            export OMP_NUM_THREADS=4
            py.test python/tests/test_code_examples.py
            cd example
            make cxx_omp_example
            ./cxx_omp_example
          else
            py.test python/tests
          fi

  build-docs:
    description: "Test the docs build."
    steps:
      - run: |
          source $HOME/venv/bin/activate
          cd doc/source
          python -m sphinx -M html "." "_build" -W

executors:
  python:
    parameters:
      tag:
        type: string
        default: latest
    docker:
      - image: circleci/python:<< parameters.tag >>

jobs:
  test-suite:
    parameters:
      tag:
        type: string
        default: latest
    executor:
      name: python
      tag: << parameters.tag >>

    working_directory: ~/grackle

    steps:
      - checkout
      - set-env

      - restore_cache:
          name: "Restore dependencies cache."
          key: dependencies-python-<< parameters.tag >>-v1

      - install-dependencies

      - save_cache:
          name: "Save dependencies cache"
          key: dependencies-python-<< parameters.tag >>-v1
          paths:
            - ~/.cache/pip
            - ~/venv

      - download-test-data

      - install-grackle:
          omp: 'false'

      - run-tests:
          omp: 'false'

      - install-grackle:
          omp: 'true'

      - run-tests:
          omp: 'true'

  docs-build:
    parameters:
      tag:
        type: string
        default: latest
    executor:
      name: python
      tag: << parameters.tag >>

    working_directory: ~/grackle

    steps:
      - checkout
      - install-docs-dependencies
      - build-docs

workflows:
   version: 2

   tests:
     jobs:
       - test-suite:
           name: "Python 3.5 tests"
           tag: "3.5.7"

       - test-suite:
           name: "Python 3.6 tests"
           tag: "3.6.8"

       - test-suite:
           name: "Python 3.7 tests"
           tag: "3.7.2"

       - docs-build:
           name: "Docs build"
           tag: "3.7.2"

   weekly:
     triggers:
       - schedule:
           cron: "0 0 * * 1"
           filters:
            branches:
              only:
                - master
     jobs:
       - test-suite:
           name: "Python 3.7 tests"
           tag: "3.7.2"

       - docs-build:
           name: "Docs build"
           tag: "3.7.2"
